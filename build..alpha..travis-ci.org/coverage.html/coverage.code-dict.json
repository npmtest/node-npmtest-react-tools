{"/home/travis/build/npmtest/node-npmtest-react-tools/test.js":"/* istanbul instrument in package npmtest_react_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tools/lib.npmtest_react_tools.js":"/* istanbul instrument in package npmtest_react_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_react_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_react_tools.__dirname +\n                    '/lib.npmtest_react_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tools/react-tools/main.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n/*eslint-disable no-undef*/\nvar visitors = require('./vendor/fbtransform/visitors');\nvar transform = require('jstransform').transform;\nvar typesSyntax = require('jstransform/visitors/type-syntax');\nvar inlineSourceMap = require('./vendor/inline-source-map');\n\nmodule.exports = {\n  transform: function(input, options) {\n    options = processOptions(options);\n    var output = innerTransform(input, options);\n    var result = output.code;\n    if (options.sourceMap) {\n      var map = inlineSourceMap(\n        output.sourceMap,\n        input,\n        options.filename\n      );\n      result += '\\n' + map;\n    }\n    return result;\n  },\n  transformWithDetails: function(input, options) {\n    options = processOptions(options);\n    var output = innerTransform(input, options);\n    var result = {};\n    result.code = output.code;\n    if (options.sourceMap) {\n      result.sourceMap = output.sourceMap.toJSON();\n    }\n    if (options.filename) {\n      result.sourceMap.sources = [options.filename];\n    }\n    return result;\n  }\n};\n\n/**\n * Only copy the values that we need. We'll do some preprocessing to account for\n * converting command line flags to options that jstransform can actually use.\n */\nfunction processOptions(opts) {\n  opts = opts || {};\n  var options = {};\n\n  options.harmony = opts.harmony;\n  options.stripTypes = opts.stripTypes;\n  options.sourceMap = opts.sourceMap;\n  options.filename = opts.sourceFilename;\n\n  if (opts.es6module) {\n    options.sourceType = 'module';\n  }\n  if (opts.nonStrictEs6module) {\n    options.sourceType = 'nonStrictModule';\n  }\n\n  // Instead of doing any fancy validation, only look for 'es3'. If we have\n  // that, then use it. Otherwise use 'es5'.\n  options.es3 = opts.target === 'es3';\n  options.es5 = !options.es3;\n\n  return options;\n}\n\nfunction innerTransform(input, options) {\n  var visitorSets = ['react'];\n  if (options.harmony) {\n    visitorSets.push('harmony');\n  }\n\n  if (options.es3) {\n    visitorSets.push('es3');\n  }\n\n  if (options.stripTypes) {\n    // Stripping types needs to happen before the other transforms\n    // unfortunately, due to bad interactions. For example,\n    // es6-rest-param-visitors conflict with stripping rest param type\n    // annotation\n    input = transform(typesSyntax.visitorList, input, options).code;\n  }\n\n  var visitorList = visitors.getVisitorsBySet(visitorSets);\n  return transform(visitorList, input, options);\n}\n","/home/travis/build/npmtest/node-npmtest-react-tools/react-tools/vendor/fbtransform/visitors.js":"/*global exports:true*/\n\n'use strict';\n\nvar es6ArrowFunctions =\n  require('jstransform/visitors/es6-arrow-function-visitors');\nvar es6Classes = require('jstransform/visitors/es6-class-visitors');\nvar es6Destructuring =\n  require('jstransform/visitors/es6-destructuring-visitors');\nvar es6ObjectConciseMethod =\n  require('jstransform/visitors/es6-object-concise-method-visitors');\nvar es6ObjectShortNotation =\n  require('jstransform/visitors/es6-object-short-notation-visitors');\nvar es6RestParameters = require('jstransform/visitors/es6-rest-param-visitors');\nvar es6Templates = require('jstransform/visitors/es6-template-visitors');\nvar es6CallSpread =\n  require('jstransform/visitors/es6-call-spread-visitors');\nvar es7SpreadProperty =\n  require('jstransform/visitors/es7-spread-property-visitors');\nvar react = require('./transforms/react');\nvar reactDisplayName = require('./transforms/reactDisplayName');\nvar reservedWords = require('jstransform/visitors/reserved-words-visitors');\n\n/**\n * Map from transformName => orderedListOfVisitors.\n */\nvar transformVisitors = {\n  'es6-arrow-functions': es6ArrowFunctions.visitorList,\n  'es6-classes': es6Classes.visitorList,\n  'es6-destructuring': es6Destructuring.visitorList,\n  'es6-object-concise-method': es6ObjectConciseMethod.visitorList,\n  'es6-object-short-notation': es6ObjectShortNotation.visitorList,\n  'es6-rest-params': es6RestParameters.visitorList,\n  'es6-templates': es6Templates.visitorList,\n  'es6-call-spread': es6CallSpread.visitorList,\n  'es7-spread-property': es7SpreadProperty.visitorList,\n  'react': react.visitorList.concat(reactDisplayName.visitorList),\n  'reserved-words': reservedWords.visitorList\n};\n\nvar transformSets = {\n  'harmony': [\n    'es6-arrow-functions',\n    'es6-object-concise-method',\n    'es6-object-short-notation',\n    'es6-classes',\n    'es6-rest-params',\n    'es6-templates',\n    'es6-destructuring',\n    'es6-call-spread',\n    'es7-spread-property'\n  ],\n  'es3': [\n    'reserved-words'\n  ],\n  'react': [\n    'react'\n  ]\n};\n\n/**\n * Specifies the order in which each transform should run.\n */\nvar transformRunOrder = [\n  'reserved-words',\n  'es6-arrow-functions',\n  'es6-object-concise-method',\n  'es6-object-short-notation',\n  'es6-classes',\n  'es6-rest-params',\n  'es6-templates',\n  'es6-destructuring',\n  'es6-call-spread',\n  'es7-spread-property',\n  'react'\n];\n\n/**\n * Given a list of transform names, return the ordered list of visitors to be\n * passed to the transform() function.\n *\n * @param {array?} excludes\n * @return {array}\n */\nfunction getAllVisitors(excludes) {\n  var ret = [];\n  for (var i = 0, il = transformRunOrder.length; i < il; i++) {\n    if (!excludes || excludes.indexOf(transformRunOrder[i]) === -1) {\n      ret = ret.concat(transformVisitors[transformRunOrder[i]]);\n    }\n  }\n  return ret;\n}\n\n/**\n * Given a list of visitor set names, return the ordered list of visitors to be\n * passed to jstransform.\n *\n * @param {array}\n * @return {array}\n */\nfunction getVisitorsBySet(sets) {\n  var visitorsToInclude = sets.reduce(function(visitors, set) {\n    if (!transformSets.hasOwnProperty(set)) {\n      throw new Error('Unknown visitor set: ' + set);\n    }\n    transformSets[set].forEach(function(visitor) {\n      visitors[visitor] = true;\n    });\n    return visitors;\n  }, {});\n\n  var visitorList = [];\n  for (var i = 0; i < transformRunOrder.length; i++) {\n    if (visitorsToInclude.hasOwnProperty(transformRunOrder[i])) {\n      visitorList = visitorList.concat(transformVisitors[transformRunOrder[i]]);\n    }\n  }\n\n  return visitorList;\n}\n\nexports.getVisitorsBySet = getVisitorsBySet;\nexports.getAllVisitors = getAllVisitors;\nexports.transformVisitors = transformVisitors;\n","/home/travis/build/npmtest/node-npmtest-react-tools/react-tools/vendor/fbtransform/transforms/react.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n/*global exports:true*/\n'use strict';\n\nvar Syntax = require('jstransform').Syntax;\nvar utils = require('jstransform/src/utils');\n\nvar renderJSXExpressionContainer =\n  require('./jsx').renderJSXExpressionContainer;\nvar renderJSXLiteral = require('./jsx').renderJSXLiteral;\nvar quoteAttrName = require('./jsx').quoteAttrName;\n\nvar trimLeft = require('./jsx').trimLeft;\n\n/**\n * Customized desugar processor for React JSX. Currently:\n *\n * <X> </X> => React.createElement(X, null)\n * <X prop=\"1\" /> => React.createElement(X, {prop: '1'}, null)\n * <X prop=\"2\"><Y /></X> => React.createElement(X, {prop:'2'},\n *   React.createElement(Y, null)\n * )\n * <div /> => React.createElement(\"div\", null)\n */\n\n/**\n * Removes all non-whitespace/parenthesis characters\n */\nvar reNonWhiteParen = /([^\\s\\(\\)])/g;\nfunction stripNonWhiteParen(value) {\n  return value.replace(reNonWhiteParen, '');\n}\n\nvar tagConvention = /^[a-z]|\\-/;\nfunction isTagName(name) {\n  return tagConvention.test(name);\n}\n\nfunction visitReactTag(traverse, object, path, state) {\n  var openingElement = object.openingElement;\n  var nameObject = openingElement.name;\n  var attributesObject = openingElement.attributes;\n\n  utils.catchup(openingElement.range[0], state, trimLeft);\n\n  if (nameObject.type === Syntax.JSXNamespacedName && nameObject.namespace) {\n    throw new Error('Namespace tags are not supported. ReactJSX is not XML.');\n  }\n\n  // We assume that the React runtime is already in scope\n  utils.append('React.createElement(', state);\n\n  if (nameObject.type === Syntax.JSXIdentifier && isTagName(nameObject.name)) {\n    utils.append('\"' + nameObject.name + '\"', state);\n    utils.move(nameObject.range[1], state);\n  } else {\n    // Use utils.catchup in this case so we can easily handle\n    // JSXMemberExpressions which look like Foo.Bar.Baz. This also handles\n    // JSXIdentifiers that aren't fallback tags.\n    utils.move(nameObject.range[0], state);\n    utils.catchup(nameObject.range[1], state);\n  }\n\n  utils.append(', ', state);\n\n  var hasAttributes = attributesObject.length;\n\n  var hasAtLeastOneSpreadProperty = attributesObject.some(function(attr) {\n    return attr.type === Syntax.JSXSpreadAttribute;\n  });\n\n  // if we don't have any attributes, pass in null\n  if (hasAtLeastOneSpreadProperty) {\n    utils.append('React.__spread({', state);\n  } else if (hasAttributes) {\n    utils.append('{', state);\n  } else {\n    utils.append('null', state);\n  }\n\n  // keep track of if the previous attribute was a spread attribute\n  var previousWasSpread = false;\n\n  // write attributes\n  attributesObject.forEach(function(attr, index) {\n    var isLast = index === attributesObject.length - 1;\n\n    if (attr.type === Syntax.JSXSpreadAttribute) {\n      // Close the previous object or initial object\n      if (!previousWasSpread) {\n        utils.append('}, ', state);\n      }\n\n      // Move to the expression start, ignoring everything except parenthesis\n      // and whitespace.\n      utils.catchup(attr.range[0], state, stripNonWhiteParen);\n      // Plus 1 to skip `{`.\n      utils.move(attr.range[0] + 1, state);\n      utils.catchup(attr.argument.range[0], state, stripNonWhiteParen);\n\n      traverse(attr.argument, path, state);\n\n      utils.catchup(attr.argument.range[1], state);\n\n      // Move to the end, ignoring parenthesis and the closing `}`\n      utils.catchup(attr.range[1] - 1, state, stripNonWhiteParen);\n\n      if (!isLast) {\n        utils.append(', ', state);\n      }\n\n      utils.move(attr.range[1], state);\n\n      previousWasSpread = true;\n\n      return;\n    }\n\n    // If the next attribute is a spread, we're effective last in this object\n    if (!isLast) {\n      isLast = attributesObject[index + 1].type === Syntax.JSXSpreadAttribute;\n    }\n\n    if (attr.name.namespace) {\n      throw new Error(\n         'Namespace attributes are not supported. ReactJSX is not XML.');\n    }\n    var name = attr.name.name;\n\n    utils.catchup(attr.range[0], state, trimLeft);\n\n    if (previousWasSpread) {\n      utils.append('{', state);\n    }\n\n    utils.append(quoteAttrName(name), state);\n    utils.append(': ', state);\n\n    if (!attr.value) {\n      state.g.buffer += 'true';\n      state.g.position = attr.name.range[1];\n      if (!isLast) {\n        utils.append(', ', state);\n      }\n    } else {\n      utils.move(attr.name.range[1], state);\n      // Use catchupNewlines to skip over the '=' in the attribute\n      utils.catchupNewlines(attr.value.range[0], state);\n      if (attr.value.type === Syntax.Literal) {\n        renderJSXLiteral(attr.value, isLast, state);\n      } else {\n        renderJSXExpressionContainer(traverse, attr.value, isLast, path, state);\n      }\n    }\n\n    utils.catchup(attr.range[1], state, trimLeft);\n\n    previousWasSpread = false;\n\n  });\n\n  if (!openingElement.selfClosing) {\n    utils.catchup(openingElement.range[1] - 1, state, trimLeft);\n    utils.move(openingElement.range[1], state);\n  }\n\n  if (hasAttributes && !previousWasSpread) {\n    utils.append('}', state);\n  }\n\n  if (hasAtLeastOneSpreadProperty) {\n    utils.append(')', state);\n  }\n\n  // filter out whitespace\n  var childrenToRender = object.children.filter(function(child) {\n    return !(child.type === Syntax.Literal\n             && typeof child.value === 'string'\n             && child.value.match(/^[ \\t]*[\\r\\n][ \\t\\r\\n]*$/));\n  });\n  if (childrenToRender.length > 0) {\n    var lastRenderableIndex;\n\n    childrenToRender.forEach(function(child, index) {\n      if (child.type !== Syntax.JSXExpressionContainer ||\n          child.expression.type !== Syntax.JSXEmptyExpression) {\n        lastRenderableIndex = index;\n      }\n    });\n\n    if (lastRenderableIndex !== undefined) {\n      utils.append(', ', state);\n    }\n\n    childrenToRender.forEach(function(child, index) {\n      utils.catchup(child.range[0], state, trimLeft);\n\n      var isLast = index >= lastRenderableIndex;\n\n      if (child.type === Syntax.Literal) {\n        renderJSXLiteral(child, isLast, state);\n      } else if (child.type === Syntax.JSXExpressionContainer) {\n        renderJSXExpressionContainer(traverse, child, isLast, path, state);\n      } else {\n        traverse(child, path, state);\n        if (!isLast) {\n          utils.append(', ', state);\n        }\n      }\n\n      utils.catchup(child.range[1], state, trimLeft);\n    });\n  }\n\n  if (openingElement.selfClosing) {\n    // everything up to />\n    utils.catchup(openingElement.range[1] - 2, state, trimLeft);\n    utils.move(openingElement.range[1], state);\n  } else {\n    // everything up to </ sdflksjfd>\n    utils.catchup(object.closingElement.range[0], state, trimLeft);\n    utils.move(object.closingElement.range[1], state);\n  }\n\n  utils.append(')', state);\n  return false;\n}\n\nvisitReactTag.test = function(object, path, state) {\n  return object.type === Syntax.JSXElement;\n};\n\nexports.visitorList = [\n  visitReactTag\n];\n","/home/travis/build/npmtest/node-npmtest-react-tools/react-tools/vendor/fbtransform/transforms/jsx.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n/*global exports:true*/\n'use strict';\nvar Syntax = require('jstransform').Syntax;\nvar utils = require('jstransform/src/utils');\n\nfunction renderJSXLiteral(object, isLast, state, start, end) {\n  var lines = object.value.split(/\\r\\n|\\n|\\r/);\n\n  if (start) {\n    utils.append(start, state);\n  }\n\n  var lastNonEmptyLine = 0;\n\n  lines.forEach(function(line, index) {\n    if (line.match(/[^ \\t]/)) {\n      lastNonEmptyLine = index;\n    }\n  });\n\n  lines.forEach(function(line, index) {\n    var isFirstLine = index === 0;\n    var isLastLine = index === lines.length - 1;\n    var isLastNonEmptyLine = index === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    var trimmedLine = line.replace(/\\t/g, ' ');\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, '');\n    }\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, '');\n    }\n\n    if (!isFirstLine) {\n      utils.append(line.match(/^[ \\t]*/)[0], state);\n    }\n\n    if (trimmedLine || isLastNonEmptyLine) {\n      utils.append(\n        JSON.stringify(trimmedLine) +\n        (!isLastNonEmptyLine ? ' + \\' \\' +' : ''),\n        state);\n\n      if (isLastNonEmptyLine) {\n        if (end) {\n          utils.append(end, state);\n        }\n        if (!isLast) {\n          utils.append(', ', state);\n        }\n      }\n\n      // only restore tail whitespace if line had literals\n      if (trimmedLine && !isLastLine) {\n        utils.append(line.match(/[ \\t]*$/)[0], state);\n      }\n    }\n\n    if (!isLastLine) {\n      utils.append('\\n', state);\n    }\n  });\n\n  utils.move(object.range[1], state);\n}\n\nfunction renderJSXExpressionContainer(traverse, object, isLast, path, state) {\n  // Plus 1 to skip `{`.\n  utils.move(object.range[0] + 1, state);\n  utils.catchup(object.expression.range[0], state);\n  traverse(object.expression, path, state);\n\n  if (!isLast && object.expression.type !== Syntax.JSXEmptyExpression) {\n    // If we need to append a comma, make sure to do so after the expression.\n    utils.catchup(object.expression.range[1], state, trimLeft);\n    utils.append(', ', state);\n  }\n\n  // Minus 1 to skip `}`.\n  utils.catchup(object.range[1] - 1, state, trimLeft);\n  utils.move(object.range[1], state);\n  return false;\n}\n\nfunction quoteAttrName(attr) {\n  // Quote invalid JS identifiers.\n  if (!/^[a-z_$][a-z\\d_$]*$/i.test(attr)) {\n    return '\"' + attr + '\"';\n  }\n  return attr;\n}\n\nfunction trimLeft(value) {\n  return value.replace(/^[ ]+/, '');\n}\n\nexports.renderJSXExpressionContainer = renderJSXExpressionContainer;\nexports.renderJSXLiteral = renderJSXLiteral;\nexports.quoteAttrName = quoteAttrName;\nexports.trimLeft = trimLeft;\n","/home/travis/build/npmtest/node-npmtest-react-tools/react-tools/vendor/fbtransform/transforms/reactDisplayName.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n/*global exports:true*/\n'use strict';\n\nvar Syntax = require('jstransform').Syntax;\nvar utils = require('jstransform/src/utils');\n\nfunction addDisplayName(displayName, object, state) {\n  if (object &&\n      object.type === Syntax.CallExpression &&\n      object.callee.type === Syntax.MemberExpression &&\n      object.callee.object.type === Syntax.Identifier &&\n      object.callee.object.name === 'React' &&\n      object.callee.property.type === Syntax.Identifier &&\n      object.callee.property.name === 'createClass' &&\n      object.arguments.length === 1 &&\n      object.arguments[0].type === Syntax.ObjectExpression) {\n    // Verify that the displayName property isn't already set\n    var properties = object.arguments[0].properties;\n    var safe = properties.every(function(property) {\n      var value = property.key.type === Syntax.Identifier ?\n        property.key.name :\n        property.key.value;\n      return value !== 'displayName';\n    });\n\n    if (safe) {\n      utils.catchup(object.arguments[0].range[0] + 1, state);\n      utils.append('displayName: \"' + displayName + '\",', state);\n    }\n  }\n}\n\n/**\n * Transforms the following:\n *\n * var MyComponent = React.createClass({\n *    render: ...\n * });\n *\n * into:\n *\n * var MyComponent = React.createClass({\n *    displayName: 'MyComponent',\n *    render: ...\n * });\n *\n * Also catches:\n *\n * MyComponent = React.createClass(...);\n * exports.MyComponent = React.createClass(...);\n * module.exports = {MyComponent: React.createClass(...)};\n */\nfunction visitReactDisplayName(traverse, object, path, state) {\n  var left, right;\n\n  if (object.type === Syntax.AssignmentExpression) {\n    left = object.left;\n    right = object.right;\n  } else if (object.type === Syntax.Property) {\n    left = object.key;\n    right = object.value;\n  } else if (object.type === Syntax.VariableDeclarator) {\n    left = object.id;\n    right = object.init;\n  }\n\n  if (left && left.type === Syntax.MemberExpression) {\n    left = left.property;\n  }\n  if (left && left.type === Syntax.Identifier) {\n    addDisplayName(left.name, right, state);\n  }\n}\n\nvisitReactDisplayName.test = function(object, path, state) {\n  return (\n    object.type === Syntax.AssignmentExpression ||\n    object.type === Syntax.Property ||\n    object.type === Syntax.VariableDeclarator\n  );\n};\n\nexports.visitorList = [\n  visitReactDisplayName\n];\n","/home/travis/build/npmtest/node-npmtest-react-tools/react-tools/vendor/inline-source-map.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n/*eslint-disable no-undef*/\nvar Buffer = require('buffer').Buffer;\n\nfunction inlineSourceMap(sourceMap, sourceCode, sourceFilename) {\n  // This can be used with a sourcemap that has already has toJSON called on it.\n  // Check first.\n  var json = sourceMap;\n  if (typeof sourceMap.toJSON === 'function') {\n    json = sourceMap.toJSON();\n  }\n  json.sources = [sourceFilename];\n  json.sourcesContent = [sourceCode];\n  var base64 = Buffer(JSON.stringify(json)).toString('base64');\n  return '//# sourceMappingURL=data:application/json;base64,' + base64;\n}\n\nmodule.exports = inlineSourceMap;\n"}